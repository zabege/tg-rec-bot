import os
import logging
import sqlite3
import requests
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
TMDB_API_KEY = os.getenv('TMDB_API_KEY')
TMDB_BASE_URL = "https://api.themoviedb.org/3"

# –ñ–∞–Ω—Ä—ã —Ñ–∏–ª—å–º–æ–≤
GENRES = {
    'comedy': {'id': 35, 'name': '–ö–æ–º–µ–¥–∏—è'},
    'drama': {'id': 18, 'name': '–î—Ä–∞–º–∞'},
    'fantasy': {'id': 14, 'name': '–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞'},
    'action': {'id': 28, 'name': '–ë–æ–µ–≤–∏–∫'}
}

def init_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            genre TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    conn.commit()
    conn.close()

def save_user_genre(user_id: int, genre: str):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∂–∞–Ω—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute('''
        INSERT OR REPLACE INTO users (user_id, genre) 
        VALUES (?, ?)
    ''', (user_id, genre))
    conn.commit()
    conn.close()

def get_movies_by_genre(genre_id: int, page: int = 1):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∏–ª—å–º–æ–≤ –ø–æ –∂–∞–Ω—Ä—É –∏–∑ TMDb API –∏–ª–∏ –∑–∞–≥–ª—É—à–∫–∏"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–∞–ª–∏–¥–Ω—ã–π API –∫–ª—é—á
        if TMDB_API_KEY and TMDB_API_KEY != "placeholder_until_domain_ready":
            url = f"{TMDB_BASE_URL}/discover/movie"
            params = {
                'api_key': TMDB_API_KEY,
                'language': 'ru-RU',
                'with_genres': genre_id,
                'sort_by': 'popularity.desc',
                'page': page,
                'include_adult': False
            }
            
            response = requests.get(url, params=params)
            response.raise_for_status()
            
            data = response.json()
            return data.get('results', [])[:3]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ 3 —Ñ–∏–ª—å–º–∞
        else:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫–∏ —Ñ–∏–ª—å–º–æ–≤
            return get_mock_movies_by_genre(genre_id, page)
        
    except requests.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ TMDb API: {e}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ API
        return get_mock_movies_by_genre(genre_id, page)

def get_mock_movies_by_genre(genre_id: int, page: int = 1):
    """–ó–∞–≥–ª—É—à–∫–∏ —Ñ–∏–ª—å–º–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–µ–∑ TMDb API"""
    mock_movies = {
        35: [  # –ö–æ–º–µ–¥–∏—è
            {
                'title': '–î–∂–æ–∫–µ—Ä',
                'overview': '–ò—Å—Ç–æ—Ä–∏—è —Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ –∏–∑ —Å–∞–º—ã—Ö –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∑–ª–æ–¥–µ–µ–≤ –∫–æ–º–∏–∫—Å–æ–≤. –ê—Ä—Ç—É—Ä –§–ª–µ–∫, –Ω–µ—É–¥–∞—á–ª–∏–≤—ã–π –∫–æ–º–µ–¥–∏–∞–Ω—Ç, –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ –ø—Ä–µ—Å—Ç—É–ø–Ω–æ–≥–æ –≥–µ–Ω–∏—è –î–∂–æ–∫–µ—Ä–∞.'
            },
            {
                'title': '–ú–∞–ª—å—á–∏—à–Ω–∏–∫ –≤ –í–µ–≥–∞—Å–µ',
                'overview': '–ß–µ—Ç–≤–µ—Ä–æ –¥—Ä—É–∑–µ–π –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –≤ –õ–∞—Å-–í–µ–≥–∞—Å –Ω–∞ –º–∞–ª—å—á–∏—à–Ω–∏–∫, –Ω–æ –ø—Ä–æ—Å—ã–ø–∞—é—Ç—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–µ —É—Ç—Ä–æ –∏ –Ω–µ –ø–æ–º–Ω—è—Ç, —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ –ø—Ä–æ—à–ª–æ–π –Ω–æ—á—å—é.'
            },
            {
                'title': '–ú–µ—Ä—Ç–≤—ã–µ –ø–æ—ç—Ç—ã',
                'overview': '–ò—Å—Ç–æ—Ä–∏—è –æ –≥—Ä—É–ø–ø–µ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏ –∏—Ö –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–µ–º —É—á–∏—Ç–µ–ª–µ, –∫–æ—Ç–æ—Ä—ã–π —É—á–∏—Ç –∏—Ö —Ü–µ–Ω–∏—Ç—å –ø–æ—ç–∑–∏—é –∏ —Å–ª–µ–¥–æ–≤–∞—Ç—å —Å–≤–æ–∏–º –º–µ—á—Ç–∞–º.'
            }
        ],
        18: [  # –î—Ä–∞–º–∞
            {
                'title': '–ü–æ–±–µ–≥ –∏–∑ –®–æ—É—à–µ–Ω–∫–∞',
                'overview': '–ò—Å—Ç–æ—Ä–∏—è –æ –Ω–∞–¥–µ–∂–¥–µ –∏ –¥—Ä—É–∂–±–µ –≤ —Ç—é—Ä—å–º–µ –®–æ—É—à–µ–Ω–∫, –≥–¥–µ –±–∞–Ω–∫–∏—Ä –≠–Ω–¥–∏ –î—é—Ñ—Ä–µ–π–Ω –Ω–∞—Ö–æ–¥–∏—Ç —Å–º—ã—Å–ª –∂–∏–∑–Ω–∏ –≤ —Å–∞–º—ã—Ö –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö.'
            },
            {
                'title': '–ö—Ä—ë—Å—Ç–Ω—ã–π –æ—Ç–µ—Ü',
                'overview': '–≠–ø–∏—á–µ—Å–∫–∞—è —Å–∞–≥–∞ –æ —Å–µ–º—å–µ –ö–æ—Ä–ª–µ–æ–Ω–µ, –æ–¥–Ω–æ–π –∏–∑ –ø—è—Ç–∏ –º–∞—Ñ–∏–æ–∑–Ω—ã—Ö —Å–µ–º–µ–π –ù—å—é-–ô–æ—Ä–∫–∞, –∏ –∏—Ö –±–æ—Ä—å–±–µ –∑–∞ –≤–ª–∞—Å—Ç—å –∏ —É–≤–∞–∂–µ–Ω–∏–µ.'
            },
            {
                'title': '–§–æ—Ä—Ä–µ—Å—Ç –ì–∞–º–ø',
                'overview': '–ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ—Å—Ç–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ —Å –¥–æ–±—Ä—ã–º —Å–µ—Ä–¥—Ü–µ–º, –∫–æ—Ç–æ—Ä—ã–π —Å–ª—É—á–∞–π–Ω–æ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Å–≤–∏–¥–µ—Ç–µ–ª–µ–º –∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –∞–º–µ—Ä–∏–∫–∞–Ω—Å–∫–æ–π –∏—Å—Ç–æ—Ä–∏–∏.'
            }
        ],
        14: [  # –§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞
            {
                'title': '–ú–∞—Ç—Ä–∏—Ü–∞',
                'overview': '–ú–∏—Ä, –≤ –∫–æ—Ç–æ—Ä–æ–º —á–µ–ª–æ–≤–µ—á–µ—Å—Ç–≤–æ –ø–æ—Ä–∞–±–æ—â–µ–Ω–æ –º–∞—à–∏–Ω–∞–º–∏, –∞ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å –æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–π —Å–∏–º—É–ª—è—Ü–∏–µ–π. –ù–µ–æ –¥–æ–ª–∂–µ–Ω —Å–ø–∞—Å—Ç–∏ —á–µ–ª–æ–≤–µ—á–µ—Å—Ç–≤–æ.'
            },
            {
                'title': '–ò–Ω—Ç–µ—Ä—Å—Ç–µ–ª–ª–∞—Ä',
                'overview': '–ì—Ä—É–ø–ø–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–µ–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ —á–µ—Ä–≤–æ—Ç–æ—á–∏–Ω—É –≤ –ø–æ–∏—Å–∫–∞—Ö –Ω–æ–≤–æ–≥–æ –¥–æ–º–∞ –¥–ª—è —á–µ–ª–æ–≤–µ—á–µ—Å—Ç–≤–∞, –ø–æ–∫–∞ –ó–µ–º–ª—è —É–º–∏—Ä–∞–µ—Ç.'
            },
            {
                'title': '–ë–µ–≥—É—â–∏–π –ø–æ –ª–µ–∑–≤–∏—é',
                'overview': '–î–µ—Ç–µ–∫—Ç–∏–≤ –≤ —Ñ—É—Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–æ–º –õ–æ—Å-–ê–Ω–¥–∂–µ–ª–µ—Å–µ –¥–æ–ª–∂–µ–Ω –Ω–∞–π—Ç–∏ –∏ —É–Ω–∏—á—Ç–æ–∂–∏—Ç—å —Ä–µ–ø–ª–∏–∫–∞–Ω—Ç–æ–≤ - –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ª—é–¥–µ–π, —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ –∫–æ—Å–º–æ—Å–µ.'
            }
        ],
        28: [  # –ë–æ–µ–≤–∏–∫
            {
                'title': '–¢–µ—Ä–º–∏–Ω–∞—Ç–æ—Ä 2: –°—É–¥–Ω—ã–π –¥–µ–Ω—å',
                'overview': '–ö–∏–±–µ—Ä–Ω–µ—Ç–∏—á–µ—Å–∫–∏–π –æ—Ä–≥–∞–Ω–∏–∑–º –∏–∑ –±—É–¥—É—â–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ –ø—Ä–æ—à–ª–æ–µ, —á—Ç–æ–±—ã –∑–∞—â–∏—Ç–∏—Ç—å –º–æ–ª–æ–¥–æ–≥–æ –î–∂–æ–Ω–∞ –ö–æ–Ω–Ω–æ—Ä–∞ –æ—Ç –±–æ–ª–µ–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ —Ç–µ—Ä–º–∏–Ω–∞—Ç–æ—Ä–∞.'
            },
            {
                'title': '–ú–∞–¥–∞–≥–∞—Å–∫–∞—Ä',
                'overview': '–ß–µ—Ç—ã—Ä–µ –∂–∏–≤–æ—Ç–Ω—ã—Ö –∏–∑ –∑–æ–æ–ø–∞—Ä–∫–∞ —Å–ª—É—á–∞–π–Ω–æ –æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –Ω–∞ –æ—Å—Ç—Ä–æ–≤–µ –ú–∞–¥–∞–≥–∞—Å–∫–∞—Ä –∏ –¥–æ–ª–∂–Ω—ã –Ω–∞—É—á–∏—Ç—å—Å—è –≤—ã–∂–∏–≤–∞—Ç—å –≤ –¥–∏–∫–æ–π –ø—Ä–∏—Ä–æ–¥–µ.'
            },
            {
                'title': '–ú–∏—Å—Å–∏—è –Ω–µ–≤—ã–ø–æ–ª–Ω–∏–º–∞',
                'overview': '–ê–≥–µ–Ω—Ç –ò—Ç–∞–Ω –•–∞–Ω—Ç –¥–æ–ª–∂–µ–Ω –¥–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ—é –Ω–µ–≤–∏–Ω–æ–≤–Ω–æ—Å—Ç—å –∏ —Ä–∞—Å–∫—Ä—ã—Ç—å –∑–∞–≥–æ–≤–æ—Ä, —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å —É–∫—Ä–∞–¥–µ–Ω–Ω—ã–º —Å–ø–∏—Å–∫–æ–º –∞–≥–µ–Ω—Ç–æ–≤.'
            }
        ]
    }
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∏–ª—å–º—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∂–∞–Ω—Ä–∞
    return mock_movies.get(genre_id, [])[:3]

def format_movie_message(movies: list, genre_name: str):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–∏–ª—å–º–∞–º–∏"""
    if not movies:
        return "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ñ–∏–ª—å–º—ã –¥–ª—è —ç—Ç–æ–≥–æ –∂–∞–Ω—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    
    message = f"üé¨ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ –∂–∞–Ω—Ä–µ '{genre_name}':\n\n"
    
    for i, movie in enumerate(movies, 1):
        title = movie.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        overview = movie.get('overview', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
        
        # –û–±—Ä–µ–∑–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
        if len(overview) > 150:
            overview = overview[:147] + "..."
        
        # –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ Netflix (–∑–∞–≥–ª—É—à–∫–∞)
        netflix_link = "https://netflix.com/referral"
        
        message += f"{i}. **{title}**\n"
        message += f"üìù {overview}\n"
        message += f"üé• [–°–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ Netflix]({netflix_link})\n\n"
    
    return message

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    keyboard = []
    for genre_key, genre_info in GENRES.items():
        keyboard.append([InlineKeyboardButton(
            genre_info['name'], 
            callback_data=f"genre_{genre_key}"
        )])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ —Ñ–∏–ª—å–º—ã. –í—ã–±–µ—Ä–∏ –∂–∞–Ω—Ä!",
        reply_markup=reply_markup
    )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    if query.data.startswith("genre_"):
        genre_key = query.data.replace("genre_", "")
        genre_info = GENRES.get(genre_key)
        
        if not genre_info:
            await query.edit_message_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∂–∞–Ω—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        save_user_genre(query.from_user.id, genre_key)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–ª—å–º—ã
        movies = get_movies_by_genre(genre_info['id'])
        message = format_movie_message(movies, genre_info['name'])
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –Ω–æ–≤—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        keyboard = [
            [InlineKeyboardButton("–ï—â—ë —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", callback_data=f"more_{genre_key}_1")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            message,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    elif query.data.startswith("more_"):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ï—â—ë —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"
        parts = query.data.split("_")
        if len(parts) >= 3:
            genre_key = parts[1]
            page = int(parts[2]) + 1
            genre_info = GENRES.get(genre_key)
            
            if not genre_info:
                await query.edit_message_text("–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∂–∞–Ω—Ä –∑–∞–Ω–æ–≤–æ.")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ —Ñ–∏–ª—å–º—ã
            movies = get_movies_by_genre(genre_info['id'], page)
            message = format_movie_message(movies, genre_info['name'])
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
            keyboard = [
                [InlineKeyboardButton("–ï—â—ë —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", callback_data=f"more_{genre_key}_{page}")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                message,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {update}: {context.error}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if not BOT_TOKEN:
        logger.error("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º TMDb API –∫–ª—é—á
    if not TMDB_API_KEY or TMDB_API_KEY == "placeholder_until_domain_ready":
        logger.info("TMDb API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫–∏ —Ñ–∏–ª—å–º–æ–≤")
    else:
        logger.info("TMDb API –∫–ª—é—á –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    init_database()
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_error_handler(error_handler)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main() 